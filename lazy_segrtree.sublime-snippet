<snippet>
	<content><![CDATA[
int lazy[10000]={0};

void updateRangeLazy(int *tree, int ss,int se, int l, int r, int inc, int index){
	// before going down resolve the value if it exist
	if(lazy[index]!=0){
		tree[index]+=lazy[index];
		// non leaf node
		if(ss!=se){
			lazy[2*index]+=lazy[index];
			lazy[2*index+1]+=lazy[index];
		}
		lazy[index]=0; // clears the lazy value at curr node
	}
	// base case
	// no overlap
	if(ss>r || l>se){
	 return;
	}

	//another case -complete overlap
	if(ss>=l && se<=r){
		tree[index]+=inc;

		//create a new lazy value of children node
		if(ss!=se){
			lazy[2*index]+=inc;
			lazy[2*index+1]+=inc;
		}
		return;
	}

	//Recursive case
	int mid=(ss+se)/2;
	updateRangeLazy(tree,ss,mid,l,r,inc,2*index);
	updateRangeLazy(tree,mid+1,se,l,r,inc,2*index+1);

	//update the tree[index]
	tree[index]=min(tree[2*index],tree[2*index+1]);
	return;
}

int queryLazy(int *tree, int ss, int se,int qs, int qe, int index){
	// before going down resolve the value if it exist
	if(lazy[index]!=0){
		tree[index]+=lazy[index];
		// non leaf node
		if(ss!=se){
			lazy[2*index]+=lazy[index];
			lazy[2*index+1]+=lazy[index];
		}
		lazy[index]=0; // clears the lazy value at curr node
	}

	//query logic
	//no overlap
	if(ss>qe || se<qs){
		return INT_MAX;
	}
	//complete overlap
	if(ss>=qs && se<=qe){
		return tree[index];
	}

	//partial overlap
	int mid=(ss+se)/2;
	int left=queryLazy(tree,ss,mid,qs,qe,2*index);
	int right=queryLazy(tree,mid+1,se,qs,qe,2*index+1);
	return min(left,right);
}



void buildTree(int *a, int s, int e, int *tree, int index){
    if(s==e){
        tree[index]=a[s];
        return;
    }

    // Recursive case
    int mid=(s+e)/2;

    buildTree(a,s,mid,tree,2*index);
    buildTree(a,mid+1,e,tree,2*index+1);

    tree[index]=min(tree[2*index],tree[2*index+1]);
    return; 

    /* initialize tree in main func by " int *tree= new int[4*n+1]; "
    buildTree(a,0,n-1,tree,1);

    */
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>lsegtree</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
