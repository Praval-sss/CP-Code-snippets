<snippet>
	<content><![CDATA[
		// Segtree starts-------------------------------------------------

void buildTree(int *a, int s, int e, int *tree, int index){
	if(s==e){
		tree[index]=a[s];
		return;
	}

	// Recursive case
	int mid=(s+e)/2;

	buildTree(a,s,mid,tree,2*index);
	buildTree(a,mid+1,e,tree,2*index+1);

	tree[index]=min(tree[2*index],tree[2*index+1]);
	return; 

	/* initialize tree in main func by " int *tree= new int[4*n+1]; "
	buildTree(a,0,n-1,tree,1);

	*/
} 

int query(int *tree, int ss, int se, int qs, int qe, int index){
	
	//complete overlap
	if(ss>=qs && se<=qe) return tree[index];

	// No overlap
	if(qe<ss || qs>se) return INT_MAX;

	//partial overlap
	int mid=(ss+se)/2;
	int left=query(tree,ss,mid,qs,qe,2*index);
	int right = query(tree,mid+1,se,qs,qe,2*index+1);
	return min(left,right); 
}

void updateNode(int *tree, int ss, int se, int i, int increment, int index){
	
	//case when i is out of bounds
	if(i>se || i<ss){
		return;
	}
	//left node
	if(ss==se){
		tree[index]+=increment;
		return;
	}
	//otherwise

	int mid=(ss+se)/2;
	updateNode(tree,ss,mid,i,increment,2*index);
	updateNode(tree,mid+1,se,i,increment,2*index+1);
	tree[index]=min(tree[2*index],tree[2*index+1]);
}

void updateRange(int *tree, int ss, int se, int l, int r,int inc,int index){
	//out of bounds
	if(l>se || r<ss) return;

	//leaf node
	if(ss==se){
		tree[index]+=inc;
		return;
	}

	//Recursive case
	int mid=(ss+se)/2;
	updateRange(tree,ss,mid,l,r,inc,2*index);
	updateRange(tree,mid+1,se,l,r,inc,2*index+1);

	tree[index]= min(tree[2*index],tree[2*index+1]);
	return;

}
		// Segtree ends-------------------------------------------------

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>segtree</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
